# -*- encoding: utf-8 -*-
##############################################################################
#    
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2009 Tiny SPRL (<http://tiny.be>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.     
#
##############################################################################

from osv import osv, fields
import time
from datetime import datetime, date
from tools.translate import _
from tools import DEFAULT_SERVER_DATE_FORMAT, DEFAULT_SERVER_DATETIME_FORMAT, float_compare
import decimal_precision as dp
import netsvc
import openerp

# TMS Travel Expenses
class tms_expense(osv.osv):
    _name = 'tms.expense'
    _description = 'TMS Travel Expenses'



    def _get_travels(self, cr, uid, ids, context=None):
        result = []
        for move in self.pool.get('account.move').browse(cr, uid, ids, context=context):
            for line in move.line_id:
                result.append(line.id)
        return result

    _columns = {
        'name': openerp.osv.fields.char('Name', size=64, readonly=True, select=True),
        'shop_id': openerp.osv.fields.many2one('sale.shop', 'Shop', required=True, readonly=False, states={'confirm': [('readonly', True)],'closed':[('readonly',True)]}),
        'sequence_id': openerp.osv.fields.many2one('ir.sequence', 'Sequence', required=True, readonly=False, states={'confirm': [('readonly', True)],'closed':[('readonly',True)]}),
        'employee_id': openerp.osv.fields.many2one('hr.employee', 'Driver', required=True, readonly=False, states={'approve': [('readonly', True)],'confirm': [('readonly', True)],'closed':[('readonly',True)]}),

        'travel_ids':openerp.osv.fields.one2many('tms.travel', 'expense_id', string='Travels', states={'confirm': [('readonly', True)],'closed':[('readonly',True)]}

        'state': openerp.osv.fields.selection([
            ('draft', 'Pending'),
            ('approve', 'Approved'),
            ('confirm', 'Confirmed'),
            ('cancel', 'Cancelled')
            ], 'Expense State', readonly=True, help="Gives the state of the Travel Expense. ", select=True),
        'expense_policy': openerp.osv.fields.selection([           
            ('manual', 'Manual'),
            ('automatic', 'Automatic'),
            ], 'Expense  Policy', readonly=True,
            help=" Manual - This expense record is manual\nAutomatic - This expense record is automatically generated by parametrization", select=True),



        'date': openerp.osv.fields.date('Date', required=True, select=True,readonly=False, states={'confirm': [('readonly', True)],'closed':[('readonly',True)]}),

        'invoice_id': openerp.osv.fields.many2one('account.invoice','Invoice Record', readonly=True),
        'invoiced':  openerp.osv.fields.function(_invoiced, method=True, string='Invoiced', type='boolean', multi='invoiced', store=True),
        'invoice_paid':  openerp.osv.fields.function(_invoiced, method=True, string='Paid', type='boolean', multi='invoiced', store=True),
        'invoice_name':  openerp.osv.fields.function(_invoiced, method=True, string='Invoice', type='char', size=64, multi='invoiced', store=True),

        'expense_line': openerp.osv.fields.one2many('tms.expense.line', 'expense_id', 'Expense Lines', readonly=False, states={'confirm': [('readonly', True)],'closed':[('readonly',True)]}),

        'amount_real_expense': openerp.osv.fields.function(_amount_all, method=True, digits_compute= dp.get_precision('Sale Price'), string='Expenses', type='float',
                                            store=True, multi='amount_real_expense'),
        'amount_madeup_expense': openerp.osv.fields.function(_amount_all, method=True, digits_compute= dp.get_precision('Sale Price'), string='Fake Expenses', type='float',
                                            store=True, multi='amount_real_expense'),
        'amount_salary': openerp.osv.fields.function(_amount_all, method=True, digits_compute= dp.get_precision('Sale Price'), string='Salary', type='float',
                                            store=True, multi='amount_real_expense'),
        'amount_retention': openerp.osv.fields.function(_amount_all, method=True, digits_compute= dp.get_precision('Sale Price'), string='Retentios', type='float',
                                            store=True, multi='amount_real_expense'),
        'amount_discount': openerp.osv.fields.function(_amount_all, method=True, digits_compute= dp.get_precision('Sale Price'), string='Discounts', type='float',
                                            store=True, multi='amount_real_expense'),
        'amount_untaxed': openerp.osv.fields.function(_amount_all, method=True, digits_compute= dp.get_precision('Sale Price'), string='SubTotal', type='float',
                                            store=True, multi='amount_real_expense'),
        'amount_tax': openerp.osv.fields.function(_amount_all, method=True, digits_compute= dp.get_precision('Sale Price'), string='Taxes', type='float',
                                            store=True, multi='amount_real_expense'),
        'amount_total': openerp.osv.fields.function(_amount_all, method=True, digits_compute= dp.get_precision('Sale Price'), string='Total', type='float',
                                            store=True, multi='amount_real_expense'),



        'distance_routes': openerp.osv.fields.function(_get_route_distance, string='Distance from routes', method=True, type='float', digits=(18,6), help="Routes Distance", multi="distance_route"),
        'distance_real':  openerp.osv.fields.float('Distance Real', digits=(18,6), help="Route obtained by electronic reading and/or GPS"),
       
        'create_uid' : openerp.osv.fields.many2one('res.users', 'Created by', readonly=True),
        'create_date': openerp.osv.fields.datetime('Creation Date', readonly=True, select=True),
        'cancelled_by' : openerp.osv.fields.many2one('res.users', 'Cancelled by', readonly=True),
        'date_cancelled': openerp.osv.fields.datetime('Date Cancelled', readonly=True),
        'approved_by' : openerp.osv.fields.many2one('res.users', 'Approved by', readonly=True),
        'date_approved': openerp.osv.fields.datetime('Date Approved', readonly=True),
        'confirmed_by' : openerp.osv.fields.many2one('res.users', 'Confirmed by', readonly=True),
        'date_confirmed': openerp.osv.fields.datetime('Date Confirmed', readonly=True),
        'drafted_by' : openerp.osv.fields.many2one('res.users', 'Drafted by', readonly=True),
        'date_drafted': openerp.osv.fields.datetime('Date Drafted', readonly=True),

        'notes': openerp.osv.fields.text('Notes', readonly=False, states={'confirm': [('readonly', True)],'closed':[('readonly',True)]}),

        
        'company_id': openerp.osv.fields.related('shop_id','company_id',type='many2one',relation='res.company',string='Company',store=True,readonly=True),


        'amount_declared' : openerp.osv.fields.float('Amount Declared', digits_compute= dp.get_precision('Sale Price'), help=" Load value amount declared for insurance purposes..."),
        'replaced_waybill_id' : openerp.osv.fields.many2one('tms.waybill', 'Replaced Waybill', readonly=True),


        'fuelvoucher_ids':openerp.osv.fields.one2many('tms.fuelvoucher', 'travel_id', string='Fuel Vouchers', states={'cancel':[('readonly',True)], 'closed':[('readonly',True)]}),
        'advance_ids':openerp.osv.fields.one2many('tms.advance', 'travel_id', string='Advances', states={'cancel':[('readonly',True)], 'closed':[('readonly',True)]}),

    }
    _defaults = {
        'date'            : lambda *a: time.strftime(DEFAULT_SERVER_DATE_FORMAT),
        'billing_policy'        : 'manual',
        'state'                 : lambda *a: 'draft',
    }
    _sql_constraints = [
        ('name_uniq', 'unique(name)', 'Expense record must be unique !'),
    ]

    _order = 'name desc'



# Class for Expense Lines
class tms_expense_line(osv.osv):
    _name = 'tms.expense.line'
    _description = 'Expense Line'

    def _amount_line(self, cr, uid, ids, field_name, args, context=None):
        tax_obj = self.pool.get('account.tax')
        cur_obj = self.pool.get('res.currency')
        res = {}
        if context is None:
            context = {}
        for line in self.browse(cr, uid, ids, context=context):
            price = line.price_unit
            taxes = tax_obj.compute_all(cr, uid, line.product_id.taxes_id, price, line.product_uom_qty, line.waybill_id.partner_invoice_id.id, line.product_id, line.waybill_id.partner_id)
            cur = line.waybill_id.pricelist_id.currency_id

            amount_with_taxes = cur_obj.round(cr, uid, cur, taxes['total_included'])
            amount_tax = cur_obj.round(cr, uid, cur, taxes['total_included']) - cur_obj.round(cr, uid, cur, taxes['total'])
            
            price_subtotal = line.price_unit * line.product_uom_qty
            res[line.id] =  {   'price_total'   : amount_with_taxes,
                                'tax_amount'    : amount_tax,
                                }
        return res

    _columns = {
#        'agreement_id': openerp.osv.fields.many2one('tms.agreement', 'Agreement', required=False, ondelete='cascade', select=True, readonly=True),
        'expense_id': openerp.osv.fields.many2one('tms.expense', 'Expense', required=False, ondelete='cascade', select=True, readonly=True),
        'line_type': openerp.osv.fields.selection([
                                          ('real_expense','Real Expense'),
                                          ('madeup_expense','Made-up Expense'),
                                          ('salary','Salary'),
                                          ('retention','Salary Retention'),
                                          ('discount','Salary Discount'),
                                          ('fuel','Fuel'),
                                    ], 'Line Type', require=True),

         'name': openerp.osv.fields.char('Description', size=256, required=True),
        'sequence': openerp.osv.fields.integer('Sequence', help="Gives the sequence order when displaying a list of sales order lines."),
        'product_id': openerp.osv.fields.many2one('product.product', 'Product', 
                            domain=[('tms_category', 'in', ('expense_real', 'madeup_expense', 'salary','salary_retention' ,'salary_discount')]),
        'price_unit': openerp.osv.fields.float('Unit Amount', required=True, digits_compute= dp.get_precision('Sale Price')),
        'price_total'   : openerp.osv.fields.function(_amount_line, method=True, string='Total Amount', type='float', digits_compute= dp.get_precision('Sale Price'),  store=True, multi='price_subtotal'),
        'tax_amount'   : openerp.osv.fields.function(_amount_line, method=True, string='Tax Amount', type='float', digits_compute= dp.get_precision('Sale Price'),  store=True, multi='price_subtotal'),
        'tax_id': openerp.osv.fields.many2many('account.tax', 'waybill_tax', 'waybill_line_id', 'tax_id', 'Taxes'),
        'product_uom_qty': openerp.osv.fields.float('Quantity (UoM)', digits=(16, 2)),
        'product_uom': openerp.osv.fields.many2one('product.uom', 'Unit of Measure '),
        'notes': openerp.osv.fields.text('Notes'),
        'expense_employee_id': openerp.osv.fields.related('expense_id', 'employee_id', type='many2one', relation='res.partner', store=True, string='Driver'),
#        'company_id': openerp.osv.fields.related('waybill_id', 'company_id', type='many2one', relation='res.company', string='Company', store=True, readonly=True),
        'control': openerp.osv.fields.boolean('Control'),
        'automatic': openerp.osv.fields.boolean('Automatic', help="Check this if you want to create Advances and/or Fuel Vouchers for this line automatically"),
        'credit': openerp.osv.fields.boolean('Credit', help="Check this if you want to create Fuel Vouchers for this line"),
        'fuel_supplier_id': openerp.osv.fields.many2one('res.partner', 'Fuel Supplier', domain=[('tms_category', '=', 'fuel')],  required=False, states={'cancel':[('readonly',True)], 'confirm':[('readonly',True)]}),
    }
    _order = 'sequence'

    _defaults = {
#        'line_type': 'product',
        'product_uom_qty': 1,
        'sequence': 10,
        'price_unit': 0.0,
    }


# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
